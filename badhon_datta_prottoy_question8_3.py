# -*- coding: utf-8 -*-
"""BADHON DATTA.PROTTOY - Question8.3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZY6U27ereZ4Pci05BBF48-pSeXiJKF7K

The dataset diamonds.csv contains the price and features of around 50000 diamonds.
1. Make
a bar chart to see the number of diamonds for each cut
2. Now map the clarity of each diamond to the aesthetic fill
3. Flip the coordinates
4. Use polar coordinates
5. Group the diamonds by colour and find the average price and the number of diamonds per
colour
6. Filter all the diamonds with a price &gt; $15000
7. Display the diamonds by colour, by carats and by cut using several different geoms
"""

import pandas as pd

df = pd.read_csv('diamonds.csv')
print(df.head())

"""Ans to the question no 1

Loaded the diamond data, which includes features such as carat, cut, color, clarity, depth, table, and price. Displayed the first few rows to examine the dataset's structure.
"""

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='cut', palette='viridis')
plt.title('Number of Diamonds for Each Cut')
plt.xlabel('Cut')
plt.ylabel('Number of Diamonds')
plt.show()

"""Ans to the question no 2

Created a bar chart to show the number of diamonds for each cut (e.g., Ideal, Premium, Good), providing an overview of the distribution of cuts within the dataset.
"""

plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='cut', hue='clarity', palette='viridis')
plt.title('Number of Diamonds by Cut and Clarity')
plt.xlabel('Cut')
plt.ylabel('Number of Diamonds')
plt.legend(title='Clarity')
plt.show()

"""Ans to the question no 3

Mapped the clarity (e.g., SI1, VS1, VVS2) as the aesthetic fill in the bar chart to visualize the breakdown of clarity within each cut type. This allowed for a detailed look at clarity variations across cuts.
"""

plt.figure(figsize=(10, 6))
sns.countplot(data=df, y='cut', hue='clarity', palette='viridis')
plt.title('Number of Diamonds by Cut and Clarity (Flipped)')
plt.xlabel('Number of Diamonds')
plt.ylabel('Cut')
plt.legend(title='Clarity')
plt.show()

"""Ans to the question no 4

Flipped the coordinates to view the previous bar chart horizontally, providing a different perspective on the distribution of diamond cuts and clarity.
"""

color_summary = df.groupby('color').agg(
    average_price=('price', 'mean'),
    number_of_diamonds=('cut', 'count')
).reset_index()

plt.figure(figsize=(10, 10))
theta = color_summary['color']
r = color_summary['average_price']

plt.subplot(projection='polar')
plt.bar(theta, r, color='blue', alpha=0.5)
plt.title('Average Price of Diamonds by Color (Polar Coordinates)')
plt.show()

"""Ans to the question no 5

Grouped the diamonds by color, calculated the average price and number of diamonds per color, and then used polar coordinates to visualize the average price by color. This created a circular representation of color-based price variation.
"""

high_value_diamonds = df[df['price'] > 15000]
print(high_value_diamonds.head())

"""Ans to the question no 6

Filtered the dataset for diamonds priced above $15,000 to analyze high-value diamonds. Displayed the filtered data to inspect the characteristics of these premium diamonds.Display the diamonds by colour, by carats and by cut using several different geoms
"""

plt.figure(figsize=(14, 8))

plt.subplot(2, 2, 1)
sns.scatterplot(data=high_value_diamonds, x='carat', y='price', hue='color', style='cut', palette='viridis')
plt.title('Scatter Plot: Carats vs Price')

plt.subplot(2, 2, 2)
sns.boxplot(data=high_value_diamonds, x='color', y='price', palette='viridis')
plt.title('Box Plot: Price by Color')

plt.subplot(2, 2, 3)
sns.histplot(data=high_value_diamonds, x='carat', bins=30, kde=True, color='purple')
plt.title('Histogram of Carats')

plt.subplot(2, 2, 4)
sns.countplot(data=high_value_diamonds, x='color', palette='viridis')
plt.title('Count of Diamonds by Color')

plt.tight_layout()
plt.show()