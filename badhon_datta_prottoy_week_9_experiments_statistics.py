# -*- coding: utf-8 -*-
"""BADHON DATTA.PROTTOY - Week 9 Experiments - Statistics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bqYLZEZcbXGWRTrUmkeAauSYEGFkw8vS

## Note for all questions:
   - Clearly identify and write down the null and alternate hypotheses.

   - Print out the results/inference after test

# 9.1 Normal Distribution

**Get the stock price of Microsoft for the year 2018.**
   - **Data Source:** Data can be easily obtained using the `yfinance` (yahoo finance) library.
   
   a. Compute the daily return of the stock in 2018. Does it follow a normal distribution?

   b. Propose a transformation of the daily/weekly return so that the daily return follows a normal distribution. Check if it follows a normal distribution using a statistical test and Q-Q plot.

To download data use the following:
   ```
import yfinance as yf

#Download stock data for Microsoft (MSFT) for the year 2018
msft = yf.download("MSFT", start="2018-01-01", end="2019-01-01")

#To take weekly average use resampling as follows:

msft = msft.resample('W').mean()

   ```
"""

import yfinance as yf
import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt
import seaborn as sns
msft = yf.download("MSFT", start="2018-01-01", end="2019-01-01")
msft['Daily Return'] = (msft['Adj Close'] - msft['Adj Close'].shift(1)) / msft['Adj Close'].shift(1)
msft_weekly = msft['Adj Close'].resample('W').mean()
msft['Weekly Return'] = (msft_weekly.shift(-1) - msft_weekly) / msft_weekly
shapiro_test_daily = stats.shapiro(msft['Daily Return'].dropna())
print(f"Shapiro-Wilk Test for Daily Return: W={shapiro_test_daily.statistic}, p-value={shapiro_test_daily.pvalue}")
plt.figure(figsize=(6, 6))
stats.probplot(msft['Daily Return'].dropna(), dist="norm", plot=plt)
plt.title('Q-Q Plot for Daily Returns')
plt.show()
msft['Log Daily Return'] = np.log1p(msft['Daily Return'].dropna())
shapiro_test_log = stats.shapiro(msft['Log Daily Return'].dropna())
print(f"Shapiro-Wilk Test for Log-Transformed Daily Return: W={shapiro_test_log.statistic}, p-value={shapiro_test_log.pvalue}")
plt.figure(figsize=(6, 6))
stats.probplot(msft['Log Daily Return'].dropna(), dist="norm", plot=plt)
plt.title('Q-Q Plot for Log-Transformed Daily Returns')
plt.show()

"""# 9.2 t test

**Read the Friends dataset.**

   a. Filter only people who don't have an NA for the questions "operas" (How many operas have you seen in your life?) and "like science" (On a scale of 1, (not at all), to 7, (very much), how much do you like science?).

   b. Create a new column `operaYN` which indicates whether a person has seen an opera or not.

   c. Using a t-test, determine whether people who have seen an opera like science more or less than those who have not.

   d. Create a plot of the results using appropriate data visualization.
"""

import pandas as pd
import scipy.stats as stats
import matplotlib.pyplot as plt
import seaborn as sns

friends = pd.read_csv('friends.csv')

friends_filtered = friends.dropna(subset=['operas', 'like.science'])

friends_filtered['operaYN'] = friends_filtered['operas'] > 0

seen_opera = friends_filtered[friends_filtered['operaYN']]['like.science']
not_seen_opera = friends_filtered[~friends_filtered['operaYN']]['like.science']

t_stat, p_value = stats.ttest_ind(seen_opera, not_seen_opera, equal_var=False)
print(f"t-test Results: t-statistic = {t_stat}, p-value = {p_value}")
if p_value < 0.05:
    print("Reject the null hypothesis. There is a significant difference in 'like science' scores between those who have seen an opera and those who have not.")
else:
    print("Fail to reject the null hypothesis. There is no significant difference in 'like science' scores between those who have seen an opera and those who have not.")

plt.figure(figsize=(8, 5))
sns.boxplot(x='operaYN', y='like.science', data=friends_filtered)
plt.xlabel("Seen an Opera (operaYN)")
plt.ylabel("Like Science (1-7)")
plt.title("Comparison of 'Like Science' Scores by Opera Experience")
plt.show()

"""# 9.3 One way ANOVA

**Per pupil costs in thousands of dollars for school tuition for school districts in three areas are shown below:**

   - **Area 1:** 6.2, 9.3, 6.8, 6.1, 6.7, 7.5
   - **Area 2:** 7.5, 8.2, 8.5, 8.0, 7.0, 9.3
   - **Area 3:** 5.8, 6.4, 5.6, 7.1, 3.0

   Test the claim that there is a difference in mean for the three areas at a significance level of 0.05.
"""

import scipy.stats as stats

area_1 = [6.2, 9.3, 6.8, 6.1, 6.7, 7.5]
area_2 = [7.5, 8.2, 8.5, 8.0, 7.0, 9.3]
area_3 = [5.8, 6.4, 5.6, 7.1, 3.0]

f_stat, p_value = stats.f_oneway(area_1, area_2, area_3)
print(f"ANOVA Test Results: F-statistic = {f_stat}, p-value = {p_value}")

alpha = 0.05
if p_value < alpha:
    print("Reject the null hypothesis. There is a significant difference in the mean per-pupil costs among the three areas.")
else:
    print("Fail to reject the null hypothesis. There is no significant difference in the mean per-pupil costs among the three areas.")

"""# 9.4 Two way ANOVA - 1

**A motor company wishes to check the influence of tyre type and shock absorber setting on the road holding of one of its cars.**
   - Two types of tyres and three possible settings for shock absorbers were selected.
   - An experiment is conducted by selecting each tire type and shock absorber setting. The data from the experiment is given below:


| Tyre\Shock Absorber | Comfort | Normal | Sport |
| --- | --- | --- | --- |
| A1 | 5 | 8 | 6 |
| A1| 6 | 5 | 9 |
| A1 | 8 | 3 | 12 |
| A2 | 9 | 10 | 12 |
| A2 | 7 | 9 | 10 |
| A2 | 7 | 8 | 9 |



   Obtain the two-way ANOVA table and state your conclusions at a 5% level of significance.

   Also, display the interaction plot.
"""

import pandas as pd
import scipy.stats as stats
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
from statsmodels.formula.api import ols

data = pd.DataFrame({
    'Tire': ['A1', 'A1', 'A1', 'A1', 'A1', 'A1', 'A2', 'A2', 'A2', 'A2', 'A2', 'A2'],
    'ShockAbsorber': ['Comfort', 'Comfort', 'Comfort', 'Normal', 'Normal', 'Normal', 'Sport', 'Sport', 'Sport', 'Comfort', 'Comfort', 'Comfort'],
    'RoadHolding': [5, 6, 8, 8, 5, 3, 6, 9, 12, 9, 7, 7]
})

model = ols('RoadHolding ~ C(Tire) * C(ShockAbsorber)', data=data).fit()
anova_table = sm.stats.anova_lm(model, typ=2)
print(anova_table)

alpha = 0.05
for effect, p_val in zip(anova_table.index, anova_table['PR(>F)']):
    if p_val < alpha:
        print(f"Reject the null hypothesis for {effect}. There is a significant effect.")
    else:
        print(f"Fail to reject the null hypothesis for {effect}. There is no significant effect.")

plt.figure(figsize=(8, 6))
sns.pointplot(x='ShockAbsorber', y='RoadHolding', hue='Tire', data=data, dodge=True, markers=["o", "s"], capsize=.1)
plt.title("Interaction Plot of Tire Type and Shock Absorber Setting on Road Holding")
plt.xlabel("Shock Absorber Setting")
plt.ylabel("Road Holding")
plt.legend(title="Tire Type")
plt.show()

"""# 9.5 Two way ANOVA - 2

**A vehicle manufacturer wishes to test the ability of three types of steel alloy panels to resist corrosion when three different paint types are applied.**
   - Three panels with differing steel alloy compositions are coated with three types of paint.
   - The following coded data represents the ability of painted panels to resist weathering:

Data 1

   | Paint type | Steel Alloy 1 | Steel Alloy 2 | Steel Alloy 3 |
|------------|---------------|---------------|---------------|
| 1          | 40            | 51            | 56            |
| 2          | 54            | 55            | 50            |
| 3          | 47            | 56            | 50            |


Data 2

| PaintType | SteelAlloy | Resistance |
|-----------|------------|------------|
| 1         | Alloy1     | 40         |
| 1         | Alloy2     | 51         |
| 1         | Alloy3     | 56         |
| 2         | Alloy1     | 54         |
| 2         | Alloy2     | 55         |
| 2         | Alloy3     | 50         |
| 3         | Alloy1     | 47         |
| 3         | Alloy2     | 56         |
| 3         | Alloy3     | 50         |
| 1         | Alloy1     | 47         |
| 2         | Alloy2     | 56         |
| 3         | Alloy3     | 50         |


Data 3

| PaintType | SteelAlloy | Resistance |
|-----------|------------|------------|
| 1         | Alloy1     | 30         |
| 1         | Alloy2     | 60         |
| 1         | Alloy3     | 65         |
| 2         | Alloy1     | 70         |
| 2         | Alloy2     | 75         |
| 2         | Alloy3     | 45         |
| 3         | Alloy1     | 50         |
| 3         | Alloy2     | 85         |
| 3         | Alloy3     | 55         |
| 1         | Alloy1     | 35         |
| 2         | Alloy2     | 80         |
| 3         | Alloy3     | 50         |


   Use two-way ANOVA to determine whether differences in the ability of panels to resist corrosion may be attributed to either the type of paint or the steel alloy composition of the panel.

   Also display the interaction plot.
"""

import pandas as pd
import statsmodels.api as sm
from statsmodels.formula.api import ols
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.DataFrame({
    'PaintType': [1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 2, 3],
    'SteelAlloy': ['Alloy1', 'Alloy2', 'Alloy3', 'Alloy1', 'Alloy2', 'Alloy3',
                   'Alloy1', 'Alloy2', 'Alloy3', 'Alloy1', 'Alloy2', 'Alloy3'],
    'Resistance': [30, 60, 65, 70, 75, 45, 50, 85, 55, 35, 80, 50]
})

model = ols('Resistance ~ C(PaintType) * C(SteelAlloy)', data=data).fit()
anova_table = sm.stats.anova_lm(model, typ=2)
print(anova_table)

alpha = 0.05
for effect, p_val in zip(anova_table.index, anova_table['PR(>F)']):
    if p_val < alpha:
        print(f"Reject the null hypothesis for {effect}. There is a significant effect.")
    else:
        print(f"Fail to reject the null hypothesis for {effect}. There is no significant effect.")

plt.figure(figsize=(8, 6))
sns.pointplot(x='PaintType', y='Resistance', hue='SteelAlloy', data=data, dodge=True, markers=["o", "s", "D"], capsize=.1)
plt.title("Interaction Plot of Paint Type and Steel Alloy on Corrosion Resistance")
plt.xlabel("Paint Type")
plt.ylabel("Corrosion Resistance")
plt.legend(title="Steel Alloy")
plt.show()

"""# 9.6 Chi squared test

**Use the birthwt dataset (discussed in class) to examine the relationship between hypertension (ht) and the risk of low birth weight (low).**

To download the birthwt data:

```
import statsmodels.api as sm
data_cat = sm.datasets.get_rdataset("birthwt","MASS")


```
"""

import statsmodels.api as sm
import pandas as pd
import scipy.stats as stats

data = sm.datasets.get_rdataset("birthwt", "MASS").data

print(data.head())

data['ht'] = data['ht'].astype('category')
data['low'] = data['low'].astype('category')

contingency_table = pd.crosstab(data['ht'], data['low'])
print("Contingency Table:\n", contingency_table)

chi2, p, dof, expected = stats.chi2_contingency(contingency_table)
print(f"\nChi-squared Test Results: Chi2 = {chi2}, p-value = {p}, Degrees of Freedom = {dof}")

print("\nExpected Frequencies:\n", expected)

alpha = 0.05
if p < alpha:
    print("Reject the null hypothesis. There is a significant association between hypertension and low birth weight.")
else:
    print("Fail to reject the null hypothesis. There is no significant association between hypertension and low birth weight.")

